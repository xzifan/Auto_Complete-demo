{"version":3,"sources":["Trie.js","index.js"],"names":["Trie","this","trie","suggestions","isLeaf","children","word","newNode","root","letter","push","traverse","CHILDREN","find","spread","console","log","App","props","handleTab","e","window","event","keyCode","preventDefault","setState","text","state","rest","suggestion","handleInput","clearTimeout","timer","setTimeout","completion","target","value","handleSubmit","trim","newExps","split","newWords","map","exp","expTrie","add","toLowerCase","filter","n","words","getVocabulary","a","fetch","method","res","charAt","length","slice","Object","keys","clear","uncomplete","pop","join","complete","data","className","onClick","confirm","type","autoFocus","onChange","onKeyDown","readOnly","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.75a8dbef.chunk.js","sourcesContent":["class Trie {\r\n  //Prefix tree 前缀树\r\n    constructor() {\r\n      this.trie = null;\r\n      this.suggestions = [];\r\n    }\r\n  \r\n    newNode() {\r\n      return {\r\n        isLeaf: false,\r\n        children: {}\r\n      }\r\n    }\r\n  \r\n    add(word) {\r\n      if (!this.trie) this.trie = this.newNode();\r\n  \r\n      let root = this.trie;\r\n      for (const letter of word) {\r\n        if (!(letter in root.children)) {\r\n          root.children[letter] = this.newNode();\r\n        }\r\n        root = root.children[letter];\r\n      }\r\n      root.isLeaf = true;\r\n    }\r\n  \r\n    find(word) {\r\n      let root = this.trie;\r\n      if (root){\r\n        for (const letter of word) {\r\n          if (letter in root.children) {\r\n            root = root.children[letter];\r\n          } else {\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n  \r\n      return root;\r\n    }\r\n  \r\n    traverse(root, word) {\r\n      if (root.isLeaf) {\r\n        this.suggestions.push(word);\r\n        return;\r\n      }\r\n  \r\n      for (const letter in root.children) {\r\n        this.traverse(root.children[letter], word + letter);\r\n      }\r\n    }\r\n  \r\n    complete(word, CHILDREN = null) {\r\n      const root = this.find(word);\r\n  \r\n      if (!root) return this.suggestions; // cannot suggest anything\r\n  \r\n      const children = root.children;\r\n  \r\n      let spread = 0;\r\n  \r\n      for (const letter in children) {\r\n        this.traverse(children[letter], word + letter);\r\n        spread++;\r\n  \r\n        if (CHILDREN && spread === CHILDREN) break;\r\n      }\r\n      return this.suggestions;\r\n    }\r\n  \r\n    clear() {\r\n      this.suggestions = [];\r\n    }\r\n  \r\n    print() {\r\n      console.log(this.trie);\r\n    }\r\n  }\r\n\r\n  export default Trie","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport Trie from './Trie'\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      trie:null,\n      rest:'',\n      suggestion:'',\n      words:[],\n      text:''\n    };\n    \n  }\n  handleTab=(e)=>{\n    e = e || window.event;\n    if(e.keyCode === 9){\n      e.preventDefault();\n      this.setState({\n        text:this.state.rest+this.state.suggestion,\n        suggestion:''\n      })\n    }\n  }\n  handleInput=(e)=>{\n    //debounce\n    clearTimeout(this.state.timer)\n    let timer = setTimeout(()=>this.completion(e),250)\n    this.setState({\n      suggestion:'',\n      text:e.target.value,\n      timer:timer,\n      rest:''\n    })\n    \n  }\n  handleSubmit = ()=>{\n    if (this.state.text.trim()!==''){\n      // split expressions by punctuations\n      let newExps = this.state.text.split(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()?]/g) \n      console.log(newExps)\n      // split words by punctuations and spaces\n      let newWords = this.state.text.split(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()? ]/g) \n      console.log(newWords)\n      \n      // add new expression to the expression prefix tree as an array of words\n      newExps.map(exp => {if(exp!==\"\")this.state.expTrie.add(exp.toLowerCase().split(' ').filter(n=>n!==\"\"))})\n      // add new words to the word prefix tree\n      newWords.map(word=>{if(word!==\"\")this.state.trie.add(word.toLowerCase())})  \n      this.setState({\n        words:[...this.state.words,...newWords],\n        text:\"\",\n        rest:\"\",\n        suggestion:\"\"\n      })\n    }\n  }\n  getVocabulary = async()=>{\n    const url = 'https://raw.githubusercontent.com/first20hours/google-10000-english/master/google-10000-english-no-swears.txt';\n    const res = await fetch(url, {\n      method: 'GET'\n    });\n    return await res.text();\n  }\n\n  completion = () => {\n    let text = this.state.text\n    if (text.trim() !== ''){   \n      if (text.charAt(text.length-1)===' '){\n        // the last char is ' ', check completion for expressions \n        let words = text.toLowerCase().slice(0,-1).split(' ')\n        let suggestion = this.state.expTrie.find(words)\n        if (suggestion && suggestion.length!==0){\n          this.setState({suggestion:text+Object.keys(suggestion.children)[0]})\n        }\n        this.state.expTrie.clear()\n      }else{   \n        // the last char is 'a-z', possibly an uncomplete word\n        let words = text.split(' ')\n        const uncomplete = words.pop()\n        let rest = words.join(' ')+' '\n        this.setState({rest:words.length===0?'':rest})\n        if( uncomplete !== '' && this.state.trie){\n          let suggestions = this.state.trie.complete(uncomplete.toLowerCase())\n          if (suggestions&&suggestions.length>0){\n            // slice the suggestion to avoid replacing uppercase\n            this.setState({suggestion:uncomplete+suggestions[0].slice(uncomplete.length)})\n            this.state.trie.clear()\n          }\n        }\n      }    \n    }\n  }\n  async componentDidMount(){\n    let data = await this.getVocabulary()\n    let words = data.split('\\n')\n    let trie = new Trie()\n    let expTrie = new Trie()\n    words.map(word=>trie.add(word.toLowerCase()))\n    expTrie.add(\"what's the weather like today\".split(' ')) // for testing\n    this.setState({\n      words:words,\n      trie:trie,\n      expTrie:expTrie\n    })\n  }\n  render(){\n    return <div className=\"container\">\n      <span onClick={()=>{if(window.confirm(\"Are you sure to clear the existing vocabulary?\"))this.setState({trie:new Trie(),expTrie:new Trie(),words:[],text:\"\",rest:\"\",suggestion:\"\"})}}>Auto-complete</span>  \n      <div className=\"search_bar\">\n        <input className=\"textfield\" \n          type='text'\n          autoFocus \n          onChange={this.handleInput} \n          onKeyDown={this.handleTab}\n          value={this.state.text }\n        />\n        <input className=\"textfield copy\"\n          value={this.state.rest+this.state.suggestion || ''}\n          readOnly\n        />\n        <button className=\"btn_submit\" onClick={this.handleSubmit}>submit</button>\n      </div>\n    </div>\n  }\n}\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}